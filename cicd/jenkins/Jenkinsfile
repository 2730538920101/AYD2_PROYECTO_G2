pipeline {
    agent {
        kubernetes {
            label 'jenkins-slave'  // El label que asignaste a tu agente en Jenkins
            defaultContainer 'jenkins-slave'  // Nombre del contenedor que ejecutar√° la tarea
        }
    }

    stages {
        stage("Checkout") {
            steps {
                script {
                    echo "GIT CHECKOUT STAGE"
                    withCredentials([usernamePassword(credentialsId: 'Github-credentials', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD')]) {
                        git url: "https://${GIT_USER}:${GIT_PASSWORD}@github.com/2730538920101/AYD2_PROYECTO_G2.git", branch: 'develop'
                    }
                }
            }
        }
        stage("Test Backend") {
            steps {
                echo "TEST"
                echo "BACKEND TEST"
            }
        }
        stage("Docker Backend") {
            steps {
                echo "BACKEND BUILD DOCKER IMAGE"
                // dir('backend'){ 
                //     script{
                //         dockerImageB = docker.build "carlosmz87/springcrudback"
                //     }
                // }
            }
        }
        stage("Build Front") {
            steps {
                echo 'FRONTEND BUILD'
                echo 'FRONTEND BUILD PROYECT'
                // dir('frontend'){
                //     sh 'npm install'
                //     sh 'npm run ng build --prod'
                // }
            }
        }
        stage("Docker Frontend") {
            steps {
                echo "FRONTEND BUILD DOCKER IMAGE"
                // dir('frontend'){
                //     script{
                //         dockerImageF = docker.build "carlosmz87/springcrudfront"
                //     }
                // }
            }
        }
        stage("Deliver App") {
            steps {
                echo "DELIVER"
                script {
                    docker.withRegistry('', 'docker-hub') {
                        echo "DELIVER BACKEND"
                        dockerImageB.push('$BUILD_NUMBER')
                        dockerImageB.push('latest')
                        echo "DELIVER FRONTEND"
                        dockerImageF.push('$BUILD_NUMBER')
                        dockerImageF.push('latest')
                    }
                }
            }
        }
    }
}
