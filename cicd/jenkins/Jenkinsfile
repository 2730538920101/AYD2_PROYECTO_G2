pipeline {
    agent {
        kubernetes {
            label 'dind'
            defaultContainer 'docker'
            yaml """
                apiVersion: v1
                kind: Pod
                metadata:
                  labels:
                    app: jenkins
                spec:
                  containers:
                    - name: docker
                      image: docker:latest
                      command:
                        - /bin/cat
                      tty: true
                      volumeMounts:
                        - name: dind-certs
                          mountPath: /certs
                      env:
                        - name: DOCKER_TLS_CERTDIR
                          value: /certs
                        - name: DOCKER_CERT_PATH
                          value: /certs
                        - name: DOCKER_TLS_VERIFY
                          value: "1"
                        - name: DOCKER_HOST
                          value: tcp://localhost:2376
                    - name: dind
                      image: docker:dind
                      securityContext:
                        privileged: true
                      env:
                        - name: DOCKER_TLS_CERTDIR
                          value: /certs
                      volumeMounts:
                        - name: dind-storage
                          mountPath: /var/lib/docker
                        - name: dind-certs
                          mountPath: /certs
                  volumes:
                    - name: dind-storage
                      emptyDir: {}
                    - name: dind-certs
                      emptyDir: {}
            """
        }
    }
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('Dockerhub-credentials')
        GIT_CREDENTIALS = credentials('Github-credentials')
    }

    stages {
        stage("Checkout") {
            steps {
                script {
                    echo "GIT CHECKOUT STAGE"
                    git url: "https://github.com/2730538920101/AYD2_PROYECTO_G2.git", branch: 'develop', credentialsId: 'Github-credentials'
                }
            }
        }

        stage("Docker build and push") {
            steps {
                container('docker') {
                    script {
                        echo "Building and pushing Docker images"
                        
                        sh """
                        docker build -t carlosmz87/ayd2_p1_app_service:latest backend/app_service
                        docker build -t carlosmz87/ayd2_p1_notification_producer:latest backend/notification_service/producer
                        docker build -t carlosmz87/ayd2_p1_notification_consumer:latest backend/notification_service/consumer
                        docker build -t carlosmz87/ayd2_p1_frontend:latest frontend
                        """
                        
                        docker.withRegistry('', 'Dockerhub-credentials') {
                            sh """
                            docker push carlosmz87/ayd2_p1_app_service:latest
                            docker push carlosmz87/ayd2_p1_notification_producer:latest
                            docker push carlosmz87/ayd2_p1_notification_consumer:latest
                            docker push carlosmz87/ayd2_p1_frontend:latest
                            """
                        }
                    }
                }
            }
        }
    }
}
