pipeline {
    agent {
        kubernetes {
            label 'jenkins-slave'  // El label que asignaste a tu agente en Jenkins
            defaultContainer 'jenkins-slave'  // Nombre del contenedor que ejecutar√° la tarea
        }
    }

    stages {
        stage("Checkout") {
            steps {
                script {
                    echo "GIT CHECKOUT STAGE"
                    withCredentials([usernamePassword(credentialsId: 'Github-credentials', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD')]) {
                        git url: "https://${GIT_USER}:${GIT_PASSWORD}@github.com/2730538920101/AYD2_PROYECTO_G2.git", branch: 'develop'
                    }
                }
            }
        }
        stage("Test app_service") {
            steps {
                echo "TEST"
                echo "APP_SERVICE TEST"
            }
        }
        stage("Docker build App service") {
            steps {
                container('docker'){
                    echo "APP_SERVICE BUILD DOCKER IMAGE"
                    dir('../backend/app_service'){ 
                        script{
                            dockerImageA = docker.build "carlosmz87/ayd2_p1_app_service:latest"
                        }
                    }
                }
            }
        }
        stage("Docker build notification producer service") {
            steps {
                echo "NOTIFICATION PRODUCER BUILD DOCKER IMAGE"
                dir('../backend/notification_service/producer'){ 
                    script{
                        dockerImageB = docker.build "carlosmz87/ayd2_p1_notification_producer:latest"
                    }
                }
            }
        }
        stage("Docker build notification consumer service") {
            steps {
                echo "NOTIFICATION CONSUMER BUILD DOCKER IMAGE"
                dir('../backend/notification_service/consumer'){ 
                    script{
                        dockerImageC = docker.build "carlosmz87/ayd2_p1_notification_consumer:latest"
                    }
                }
            }
        }
        stage("Docker build Frontend") {
            steps {
                echo "FRONTEND BUILD DOCKER IMAGE"
                dir('../frontend'){
                    script{
                        dockerImageF = docker.build "carlosmz87/ayd2_p1_frontend:latest"
                    }
                }
            }
        }
        stage("Deliver App") {
            steps {
                echo "DELIVER"
                script {
                    docker.withRegistry('', 'docker-hub') {
                        echo "DELIVER APP_SERVICE"
                        dockerImageA.push('$BUILD_NUMBER')
                        dockerImageA.push('latest')
                        echo "DELIVER NOTIFICATION PRODUCER"
                        dockerImageB.push('$BUILD_NUMBER')
                        dockerImageB.push('latest')
                        echo "DELIVER NOTIFICATION CONSUMER"
                        dockerImageC.push('$BUILD_NUMBER')
                        dockerImageC.push('latest')
                        echo "DELIVER FRONTEND"
                        dockerImageF.push('$BUILD_NUMBER')
                        dockerImageF.push('latest')
                    }
                }
            }
        }
    }
}
