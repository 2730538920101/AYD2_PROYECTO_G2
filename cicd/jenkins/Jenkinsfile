pipeline {
    agent {
        kubernetes {
            defaultContainer 'docker'
            yaml """
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                agent: jenkins-slave
            spec:
              containers:
              - name: docker
                image: docker:20.10.7
                command:
                - cat
                tty: true
                securityContext:
                  privileged: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              volumes:
              - name: docker-sock
                hostPath:
                  path: /var/run/docker.sock
            """
        }
    }
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('Dockerhub-credentials') // Credenciales de Docker Hub
        GIT_CREDENTIALS = credentials('Github-credentials') // Credenciales de GitHub
        DOCKER_IMAGE_PREFIX = "carlosmz87/ayd2_p1" // Prefijo de imagen Docker
    }

    stages {
        stage("Checkout") {
            steps {
                script {
                    echo "GIT CHECKOUT STAGE"
                    git url: "https://${GIT_CREDENTIALS_USR}:${GIT_CREDENTIALS_PSW}@github.com/2730538920101/AYD2_PROYECTO_G2.git", branch: 'develop'
                }
            }
        }
        
        stage("Docker build and push") {
            steps {
                container('docker') {
                    script {
                        echo "Building and pushing Docker images"
                        
                        def services = [
                            "app_service": "backend/app_service",
                            "notification_producer": "backend/notification_service/producer",
                            "notification_consumer": "backend/notification_service/consumer",
                            "frontend": "frontend"
                        ]
                        
                        services.each { service, path ->
                            sh "docker build -t ${DOCKER_IMAGE_PREFIX}_${service}:latest ${path}"
                        }

                        docker.withRegistry('', 'Dockerhub-credentials') {
                            services.each { service, _ ->
                                sh "docker push ${DOCKER_IMAGE_PREFIX}_${service}:latest"
                            }
                        }
                    }
                }
            }
        }
    }
}
