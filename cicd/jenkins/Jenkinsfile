pipeline {
    agent {
        kubernetes {
            label 'jenkins-slave'
            defaultContainer 'jnlp'
            yaml """
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                agent: jenkins-slave
            spec:
              containers:
              - name: jnlp
                image: jenkins/inbound-agent:alpine
                args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
              - name: docker
                image: docker:20.10.7 # Usa una imagen de Docker que incluya el CLI de Docker
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              securityContext:
                fsGroup: 1000
              volumes:
              - name: docker-sock
                hostPath:
                  path: /var/run/docker.sock
            """
        }
    }
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub') // Configura tus credenciales de Docker Hub en Jenkins
    }

    stages {
        stage("Checkout") {
            steps {
                script {
                    echo "GIT CHECKOUT STAGE"
                    withCredentials([usernamePassword(credentialsId: 'Github-credentials', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD')]) {
                        git url: "https://${GIT_USER}:${GIT_PASSWORD}@github.com/2730538920101/AYD2_PROYECTO_G2.git", branch: 'develop'
                    }
                }
            }
        }
        stage("Test app_service") {
            steps {
                echo "TEST"
                echo "APP_SERVICE TEST"
            }
        }
        stage("Docker build App service") {
            steps {
                container('docker') {
                    echo "APP_SERVICE BUILD DOCKER IMAGE"
                    dir('backend/app_service') { 
                        script {
                            dockerImageA = docker.build "carlosmz87/ayd2_p1_app_service:latest"
                        }
                    }
                }
            }
        }
        stage("Docker build notification producer service") {
            steps {
                container('docker') {
                    echo "NOTIFICATION PRODUCER BUILD DOCKER IMAGE"
                    dir('backend/notification_service/producer') { 
                        script {
                            dockerImageB = docker.build "carlosmz87/ayd2_p1_notification_producer:latest"
                        }
                    }
                }
            }
        }
        stage("Docker build notification consumer service") {
            steps {
                container('docker') {
                    echo "NOTIFICATION CONSUMER BUILD DOCKER IMAGE"
                    dir('backend/notification_service/consumer') { 
                        script {
                            dockerImageC = docker.build "carlosmz87/ayd2_p1_notification_consumer:latest"
                        }
                    }
                }
            }
        }
        stage("Docker build Frontend") {
            steps {
                container('docker') {
                    echo "FRONTEND BUILD DOCKER IMAGE"
                    dir('frontend') {
                        script {
                            dockerImageF = docker.build "carlosmz87/ayd2_p1_frontend:latest"
                        }
                    }
                }
            }
        }
        stage("Deliver App") {
            steps {
                container('docker') {
                    echo "DELIVER"
                    script {
                        docker.withRegistry('', 'Dockerhub-credentials') {
                            echo "DELIVER APP_SERVICE"
                            dockerImageA.push('$BUILD_NUMBER')
                            dockerImageA.push('latest')
                            echo "DELIVER NOTIFICATION PRODUCER"
                            dockerImageB.push('$BUILD_NUMBER')
                            dockerImageB.push('latest')
                            echo "DELIVER NOTIFICATION CONSUMER"
                            dockerImageC.push('$BUILD_NUMBER')
                            dockerImageC.push('latest')
                            echo "DELIVER FRONTEND"
                            dockerImageF.push('$BUILD_NUMBER')
                            dockerImageF.push('latest')
                        }
                    }
                }
            }
        }
    }
}
