pipeline {
    agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                agent: multi-stage
            spec:
              containers:
                - name: git
                  image: alpine/git
                  command:
                    - cat
                  tty: true
                - name: kaniko
                  image: gcr.io/kaniko-project/executor:debug
                  imagePullPolicy: Always
                  command:
                    - sleep
                  args:
                    - "9999999"
                 - name: terraform
                  image: hashicorp/terraform:latest
                  command:
                    - sleep
                  args:
                    - "9999999"
                  volumeMounts:
                    - name: jenkins-docker-cfg
                      mountPath: /kaniko/.docker
              volumes:
                - name: jenkins-docker-cfg
                  projected:
                    sources:
                      - secret:
                          name: dockerhub-credentials-secret
                          items:
                            - key: .dockerconfigjson
                              path: config.json
            """
        }
    }
    stages {
        stage('Cloning Repository') {
            steps {
                script {
                    // AsegÃºrate de que 'Github-credentials' es el ID de la credencial que configuraste
                    withCredentials([usernamePassword(credentialsId: 'Github-credentials', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        container('git') {
                            sh '''
                            git config --global credential.helper store
                            echo "https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com" > ~/.git-credentials
                            git clone https://github.com/2730538920101/AYD2_PROYECTO_G2.git
                            '''
                        }
                    }
                }
            }
        }
        stage('Checkout to Develop') {
            steps {
                container('git') {
                    sh '''
                    cd AYD2_PROYECTO_G2
                    git checkout develop
                    '''
                }
            }
        }
        stage('Build and Push app service Image') {
            steps {
                container('kaniko') {
                    sh '/kaniko/executor --context AYD2_PROYECTO_G2/backend/app_service/ --dockerfile Dockerfile --destination carlosmz87/ayd2_p1_app_service:latest'
                }
            }
        }
        stage('Build and Push notification producer service Image') {
            steps {
                container('kaniko') {
                    sh '/kaniko/executor --context AYD2_PROYECTO_G2/backend/notification_service/producer/ --dockerfile Dockerfile --destination carlosmz87/ayd2_p1_notification_producer:latest'
                }
            }
        }
        stage('Build and Push notification consumer service Image') {
            steps {
                container('kaniko') {
                    sh '/kaniko/executor --context AYD2_PROYECTO_G2/backend/notification_service/consumer/ --dockerfile Dockerfile --destination carlosmz87/ayd2_p1_notification_consumer:latest'
                }
            }
        }
        stage('Build and Push Frontend Image') {
            steps {
                container('kaniko') {
                    sh '/kaniko/executor --context AYD2_PROYECTO_G2/frontend/ --dockerfile Dockerfile --destination carlosmz87/ayd2_p1_frontend:latest'
                }
            }
        }
        stage('Deploy app with terraform'){
            steps {
                container('terraform'){
                    sh 'terraform --version'
                }
            }
        }
    }
}
